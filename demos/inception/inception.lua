-- title:  inception
-- author: gumix
-- desc:   my first demo
-- script: lua
-- input:  gamepad

SCR_W = 240
SCR_H = 136
BTN_A = 4

LENA = {
"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"
}

-- Lua 5.1+ base64 v3.0 (c) 2009 by Alex Kloss <alexthkloss@web.de>
function base64_dec(data)
	local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	local data = string.gsub(data, '[^'..b..'=]', '')
	return (data:gsub('.', function(x)
		if (x == '=') then return '' end
		local r,f='',(b:find(x)-1)
		for i=6,1,-1 do r=r..(f%2^i-f%2^(i-1)>0 and '1' or '0') end
		return r;
	end):gsub('%d%d%d?%d?%d?%d?%d?%d?', function(x)
		if (#x ~= 8) then return '' end
		local c=0
		for i=1,8 do c=c+(x:sub(i,i)=='1' and 2^(8-i) or 0) end
		return string.char(c)
	end))
end

function init()
	function init_lines()
		g_lines = { }
		for i = 1, 6 do
			g_lines[i] = {
				x_min = (i % 3) * SCR_W / 3 + 5,
				y_min = (i % 2) * SCR_H / 2 + 5,
				dx1 = 2,
				dy1 = 1.3,
				dx2 = -1.6,
				dy2 = -1
			}
			g_lines[i].x_max = g_lines[i].x_min + math.random(40, 80)
			g_lines[i].y_max = g_lines[i].y_min + math.random(30, 70)
			g_lines[i].x1 = g_lines[i].x_min
			g_lines[i].y1 = g_lines[i].y_min
			g_lines[i].x2 = g_lines[i].x_max
			g_lines[i].y2 = g_lines[i].y_max
		end
	end

	function init_image()
		g_image = { }
		for y, l in pairs(LENA) do
			g_image[y] = base64_dec(l)
		end
	end

	function init_balls()
		g_balls = { }
		for i = 1, 15 do
			g_balls[i] = {
				x = (1 + (i % 5)) * SCR_W / 6,
				y = (1 + (i % 3)) * SCR_H / 4,
				r = math.random(2, 15),
				c = math.random(15),
				dx = math.random(-100, 100) / 80,
				dy = math.random(-100, 100) / 80
			}
		end
	end

	function init_polygon()
		local bx = 30
		local by = bx / 2
		g_poly = {{ x =			bx, y = 		by },
				  { x = SCR_W - bx, y = SCR_H /  2 },
				  { x =			bx, y =	SCR_H - by },
				  { x = SCR_W - bx, y = 		by },
				  { x =			bx, y = SCR_H / 2  },
				  { x = SCR_W - bx, y =	SCR_H - by }}
		local sgn = 1
		for i, p in pairs(g_poly) do
			p.dx = sgn
			p.dy = -sgn
			p.x_min = math.max(0, p.x - math.random(20))
			p.y_min = math.max(0, p.y - math.random(20))
			p.x_max = math.min(SCR_W, p.x + math.random(20))
			p.y_max = math.min(SCR_H, p.y + math.random(20))
			sgn = -sgn
		end
	end

	cls()
	g_ticks = 0
	g_scene = 1
	g_scenes = {
		{ clr = true,  delay =  1, func = intro },
		{ clr = true,  delay = 10, func = snow },
		{ clr = false, delay =  1, func = graphing },
		{ clr = true,  delay =  5, func = recursion },
		{ clr = true,  delay =  1, func = bezier },
		{ clr = true,  delay =  2, func = funnel },
		{ clr = true,  delay =  4, func = polygon1 },
		{ clr = true,  delay =  4, func = polygon2 },
		{ clr = true,  delay =  5, func = image },
		{ clr = true,  delay =  1, func = balls } }
	g_graph_prev = 0
	init_lines()
	init_polygon()
	init_image()
	init_balls()
end

function mix(a, b, t)
	return a + (b - a) * t
end

function dist(a, b)
	return math.sqrt(math.pow(a.x + a.dx - (b.x + b.dx), 2) +
					 math.pow(a.y + a.dy - (b.y + b.dy), 2))
end

function factorial(n)
	local res = 1
	for i = 2, n do
		res = res * i
	end
	return res
end

function bernstein(n, i, t)
	return factorial(n) / factorial(i) / factorial(n - i)
		   * math.pow(t, i) * math.pow(1 - t, n - i)
end

function classify(p1, p2, p)
	local ax = p2.x - p1.x
	local ay = p2.y - p1.y
	local bx = p.x - p1.x
	local by = p.y - p1.y
	local s = ax * by - bx * ay

	if p == p1 then return 'orign' end
	if p == p2 then return 'dest' end
	if s < 0 then return 'left' end
	if s > 0 then return 'right' end
	if ax * bx < 0 or ay * by < 0 then return 'behind' end
	if ax*ax + ay*ay < bx*bx + by*by then return 'beyond' end
	return 'between'
end

function edge_type(p1, p2, a)
	local c = classify(p1, p2, a)
	if c == 'left' then
		if a.y > p1.y and a.y <= p2.y then return 'cross_left'
		else return 'inessential' end
	elseif c == 'right' then
		if a.y > p2.y and a.y <= p1.y then return 'cross_right'
		else return 'inessential' end
	elseif c == 'orign' or c == 'dest' or c == 'between' then
		return 'touching'
	else
		return 'inessential'
	end
end

function even_odd(p, a)
	local winding_number = 0
	for i = 1, #p do
		local et = edge_type(p[i], p[1 + i % #p], a)
		if et == 'touching' then
			return 'inside'
		elseif et == 'cross_left' or et == 'cross_right' then
			winding_number = 1 - winding_number
		end
	end

	if winding_number == 1 then
		return 'inside'
	else
		return 'outside'
	end
end

function intersect(a, b, c, d)
	local nx = d.y - c.y
	local ny = c.x - d.x
	local den = nx * (b.x - a.x) + ny * (b.y - a.y)

	if den == 0 then
		local t = classify(c, d, a)
		if t == 'left' or t == 'right' then
			return 'parallel'
		else
			return 'collinear'
		end
	end

	local num = nx * (a.x - c.x) + ny * (a.y - c.y)
	return -num / den, 'skew'
end

function border(c)
	rectb(0, 0, SCR_W, SCR_H, c)
end

function dotted_line_h(x1, x2, y, c)
	for x = x1, x2, 4 do
		pix(x, y, c)
	end
end

function dotted_line_v(x, y1, y2, c)
	for y = y1, y2, 4 do
		pix(x, y, c)
	end
end

function print_sin(text)
	for i = 1, #text do
		local x = SCR_W + i * 6 - g_ticks % (2 * SCR_W - 32)
		local y = 18 + 8 * math.sin(x / 16 + 2)
		print(text:sub(i,i), x + 0.5, y + 0.5, 2)
	end
end

function bezier_curve(bc)
	function interm(p1, p2, p3, t, c)
		local x12 = mix(p1.x, p2.x, t)
		local y12 = mix(p1.y, p2.y, t)
		local x23 = mix(p2.x, p3.x, t)
		local y23 = mix(p2.y, p3.y, t)
		line(x12 + 0.5, y12 + 0.5, x23 + 0.5, y23 + 0.5, c)
	end

	local n = #bc
	local t_cur = (g_ticks / 512) % 2
	if t_cur > 1 then t_cur = 2 - t_cur end

	for i = 1, n - 1 do
		line(bc[i].x, bc[i].y, bc[i + 1].x, bc[i + 1].y, 2)
	end

	if n == 3 then
		interm(bc[1], bc[2], bc[3], t_cur, 8)
	elseif n == 4 then
		local p12 = { x = mix(bc[1].x, bc[2].x, t_cur),
					  y = mix(bc[1].y, bc[2].y, t_cur) }
		local p23 = { x = mix(bc[2].x, bc[3].x, t_cur),
					  y = mix(bc[2].y, bc[3].y, t_cur) }
		local p34 = { x = mix(bc[3].x, bc[4].x, t_cur),
					  y = mix(bc[3].y, bc[4].y, t_cur) }
		line(p12.x + 0.5, p12.y + 0.5, p23.x + 0.5, p23.y + 0.5, 2)
		line(p23.x + 0.5, p23.y + 0.5, p34.x + 0.5, p34.y + 0.5, 2)
		interm(p12, p23, p34, t_cur, 8)
	end

	local step = 0.01
	local prev = bc[1]
	for t = step, t_cur, step do
		local p = { x = 0.5, y = 0.5 }
		for i = 1, n do
			local b = bernstein(n - 1, i - 1, t)
			p.x = p.x + b * bc[i].x
			p.y = p.y + b * bc[i].y
		end
		line(prev.x, prev.y, p.x, p.y, 15)
		prev = p
	end
end

function ellipse(x, y, w, h, c1, c2)
	function pix4(x, y, dx, dy, c)
		pix(x + dx, y + dy, c)
		pix(x - dx, y + dy, c)
		pix(x + dx, y - dy, c)
		pix(x - dx, y - dy, c)
	end
	function arc(x, y, f, a, b, c)
		local d1 = 0
		local d2 = a
		local s = 2*a*a + b*b * (1 - 2*a)
		while a*a * d1 <= b*b * d2 do
			if f then
				pix4(x, y, d1, d2, c)
			else
				pix4(x, y, d2, d1, c)
			end
			if s >= 0 then
				s = s + 4*b*b * (1 - d2)
				d2 = d2 - 1
			end
			s = s + a*a * (4*d1 + 6)
			d1 = d1 + 1
		end
	end
	arc(x, y, true,  h, w, c1)
	arc(x, y, false, w, h, c2)
end

function polygon_stroke(p, c)
	for i = 1, #p do
		line(p[i].x, p[i].y, p[1 + i % #p].x, p[1 + i % #p].y, c)
	end
end

function polygon_fill(p, c)
	for x = 1, SCR_W - 1 do
		for y = 1, SCR_H - 1 do
			if even_odd(p, { x = x, y = y }) == 'inside' then
				pix(x, y, c)
			end
		end
	end
end

function clip_line(l, p, c)
	local t0 = 0
	local t1 = 1
	for i = 1, #p do
		local nx = p[i].y - p[1 + i % #p].y
		local ny = p[1 + i % #p].x - p[i].x
		local den = nx * (l.x2 - l.x1) + ny * (l.y2 - l.y1)

		if den ~= 0 then
			local num = nx * (l.x1 - p[i].x) + ny * (l.y1 - p[i].y)
			local t = -num / den

			if den > 0 then
				if t > t0 then t0 = t end
			else
				if t < t1 then t1 = t end
			end
		elseif classify(p[i], p[1 + i % #p], l) == 'left' then
			return
		end
	end

	if t1 >= t0 then
		local x1 = 0.5 + mix(l.x1, l.x2, t0)
		local y1 = 0.5 + mix(l.y1, l.y2, t0)
		local x2 = 0.5 + mix(l.x1, l.x2, t1)
		local y2 = 0.5 + mix(l.y1, l.y2, t1)
		line(x1, y1, x2, y2, c)
	end
end

function clip_polygon(p, clipper)
	local new_p
	local old_p = p

	for i = 1, #clipper do
		new_p = { }
		local e0 = clipper[i]
		local e1 = clipper[1 + i % #clipper]

		for j = 1, #old_p do
			local a = old_p[j]
			local b = old_p[1 + j % #old_p]
			local t, int = intersect(a, b, e0, e1)

			if int == 'skew' and t >= 0 and t <= 1 then
				new_p[#new_p + 1] = { x = mix(a.x, b.x, t),
									  y = mix(a.y, b.y, t) }
			end

            if classify(e0, e1, b) == 'right' then
				new_p[#new_p + 1] = b
			end
		end
		old_p = new_p
	end

	return new_p
end

function intro()
	cls(13)
	print_sin('PRESS Z TO CYCLE THROUGH SCENES')
	rect(SCR_W / 2 - 24, SCR_H / 2 - 24, 48, 48, 15)
	spr(0, SCR_W / 2 - 16, SCR_H / 2 - 16, 13, 4)
	print('http://github.com/gumix/tic-80-programs', 2, SCR_H - 7, 2, true)
end

function snow()
	local x = SCR_W / 2
	local y = SCR_H / 2
	local r = y - 10
	for i = 0, 360, 2 do
		local rx = math.random(x // 5) - (x / 10)
		local ry = math.random(y // 5) - (y / 10)
		local dx = (r + rx) * math.cos(i * math.pi / 180)
		local dy = (r + ry) * math.sin(i * math.pi / 180)
		line(x + rx, y + ry, x + dx, y + dy, 15)
    end
end

function graphing()
	function axis()
		cls()
		for i = 20, SCR_W/2, 20 do
			dotted_line_h(2, SCR_W - 1, SCR_H/2 + i, 2);
			dotted_line_h(2, SCR_W - 1, SCR_H/2 - i, 2);
			dotted_line_v(SCR_W/2 + i, 2, SCR_H - 1, 2);
			dotted_line_v(SCR_W/2 - i, 2, SCR_H - 1, 2);
		end
		line(1, SCR_H/2, SCR_W-1, SCR_H/2, 2);
		line(SCR_W/2, 1, SCR_W/2, SCR_H-1, 2);
		border(2)
	end

	local fns = {
		function (t)
			local n = 70 * math.sqrt(2) * math.cos(t)
			local d = 1 + math.pow(math.sin(t), 2)
			local x = n / d + 0.5
			local y = n * math.sin(t) / d + 0.5
			return x, y
		end,
		function (t)
			local r = 16 * (3 + math.sin(t))
			local ph = 2 * math.cos(t)
			local x = r * math.cos(ph) + 0.5
			local y = r * math.sin(ph) + 0.5
			return x, y
		end,
		function (t)
			t = 2 * t
			local r = 25
			local m = 16.666 / r
			local x = (r + m * r) * math.cos(m * t)
					  - m*r*math.cos(t + m * t) + 0.5
			local y = (r + m * r) * math.sin(m * t)
					  - m*r*math.sin(t + m * t) + 0.5
			return x, y
		end,
		function (t)
			local r = 60
			local x = r * math.cos(1.5 * t) + 0.5
			local y = r * math.sin(t) + 0.5
			return x, y
		end,
		function (t)
			local r = 16 * ((1 + math.sin(t)) *
							(1 + 0.9 * math.cos(8 * t)) *
							(1 + 0.1 * math.cos(24 * t)))
			local x = r * math.cos(t) + 0.5
			local y = r * math.sin(t) + 0.5
			return x, y
		end
	}

	local duration = 512
	local g_graph_curr = 1 + (g_ticks // duration) % #fns
	if g_ticks == 0 or g_graph_curr ~= g_graph_prev then
		axis()
		g_graph_prev = g_graph_curr
	end
	local fn = fns[g_graph_curr]
	local x, y = fn((g_ticks % duration) / 40)
	pix(SCR_W/2 + x, SCR_H/2 - y, 11)
end

function recursion()
	function recur(x, y, r, k)
		local dr = 0.5
		if r > k then
			recur(x + r, y, r * dr, k)
			recur(x, y + r, r * dr, k)
			recur(x - r, y, r * dr, k)
			recur(x, y - r, r * dr, k)
			recur(x, y, r * dr, k * 2)
		end
		local c = math.random(15)
		circb(x, y, r - 7 + math.random(5), c)
	end
	recur(SCR_W / 2, SCR_H / 2, SCR_H, 10)
end

function bezier()
	bezier_curve({{ x =  40, y =  80 },
				  { x = 100, y =   1 },
				  { x = 160, y =  70 }})
	bezier_curve({{ x =   1, y =  35 },
				  { x =  45, y =  45 },
				  { x =  35, y =   5 },
				  { x =  80, y =  10 }})
	bezier_curve({{ x =   5, y = 120 },
				  { x =  80, y =  70 },
				  { x =  90, y = 135 },
				  { x =  55, y = 110 }})
	bezier_curve({{ x = 100, y = 110 },
				  { x = 210, y = 135 },
				  { x = 235, y =  35 },
				  { x = 160, y = 100 }})
end

function funnel()
	for i = 0, 73, 1.5 do
		local j = 5 + (i + g_ticks / 10) % 73
		local y = 20 + 1500 / j
		local w = 1.8 * j
		ellipse(SCR_W / 2, y, w, j, 8, 13)
	end
end

function polygon1()
	local p1 = {{ x =  60, y =  40 },
				{ x = 150, y =  10 },
				{ x = 200, y = 120 },
				{ x =  35, y = 105 }}
	polygon_stroke(p1, 2)

	local p2 = {{ x =  20, y =  80 },
				{ x = 200, y =   5 },
				{ x = 100, y =  80 },
				{ x = 150, y = 130 }}
	for _, p in pairs(p2) do
		p.x = p.x + 5 * math.cos(g_ticks / 50) + 0.5
		p.y = p.y + 5 * math.sin(g_ticks / 50) + 0.5
	end
	polygon_stroke(p2, 3)

	polygon_stroke(clip_polygon(p2, p1), 10)

	for _, l in pairs(g_lines) do
		line(l.x1 + 0.5, l.y1 + 0.5, l.x2 + 0.5, l.y2 + 0.5, 8)
		clip_line(l, p1, 15)

		l.x1 = l.x1 + l.dx1
		l.y1 = l.y1 + l.dy1
		l.x2 = l.x2 + l.dx2
		l.y2 = l.y2 + l.dy2
		if l.x1 >= l.x_max or l.x1 <= l.x_min then l.dx1 = -l.dx1 end
		if l.x2 >= l.x_max or l.x2 <= l.x_min then l.dx2 = -l.dx2 end
		if l.y1 >= l.y_max or l.y1 <= l.y_min then l.dy1 = -l.dy1 end
		if l.y2 >= l.y_max or l.y2 <= l.y_min then l.dy2 = -l.dy2 end
	end
end

function polygon2()
	polygon_fill(g_poly, 8)
	polygon_stroke(g_poly, 2)

	for _, p in pairs(g_poly) do
		p.x = p.x + p.dx
		p.y = p.y + p.dy
		if p.x >= p.x_max or p.x <= p.x_min then p.dx = -p.dx end
		if p.y >= p.y_max or p.y <= p.y_min then p.dy = -p.dy end
	end
end

function image()
	getmetatable('').__call = string.sub
	for y = 1, SCR_H do
		for x = 1, SCR_W do
			local c = 0
			local p = string.byte(g_image[y](x)) + math.random(-40, 40)
			if p > 80 then c = 15 end
			pix(x - 1, y - 1, c)
		end
	end
end

function balls()
	function collide(b1, b2)
		local m1 = math.pi * b1.r * b1.r
		local m2 = math.pi * b2.r * b2.r
		local dx = 2 * (m1 * b1.dx + m2 * b2.dx) / (m1 + m2)
		local dy = 2 * (m1 * b1.dy + m2 * b2.dy) / (m1 + m2)
		b1.dx = -b1.dx + dx
		b1.dy = -b1.dy + dy
		b2.dx = -b2.dx + dx
		b2.dy = -b2.dy + dy
	end
	border(15)
	for i, b in pairs(g_balls) do
		for j, b2 in pairs(g_balls) do
			if i ~= j then
				if dist(b, b2) <= b.r + b2.r then
					collide(b, b2)
				end
			end
		end
		if b.x + b.dx - b.r - 1 <= 0
		or b.x + b.dx + b.r + 1 >= SCR_W then
			b.dx = -b.dx
		end
		if b.y + b.dy - b.r - 1 <= 0
		or b.y + b.dy + b.r + 1 >= SCR_H then
			b.dy = -b.dy
		end
		b.x = b.x + b.dx
		b.y = b.y + b.dy
		circ(b.x, b.y, b.r, b.c)
	end
end

init()

function TIC()
	if g_ticks % g_scenes[g_scene].delay == 0 then
		if g_scenes[g_scene].clr then
			cls()
		end
		g_scenes[g_scene].func()
	end

	g_ticks = g_ticks + 1

	if btnp(BTN_A) then
		g_ticks = 0
		g_scene = 1 + g_scene % #g_scenes
	end
end
